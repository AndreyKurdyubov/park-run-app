import os
import streamlit as st
from streamlit import session_state as ss
import requests
from bs4 import BeautifulSoup
from sqlalchemy import create_engine, text
from datetime import datetime
import pandas as pd  
from utils import menu, authentication

#####################################################################################################################################################
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#####################################################################################################################################################

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title='Ducküå≥Run', page_icon=':running:')

menu()
authenticator, name, authentication_status, username = authentication()

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
image_path = 'logo.jpg'

# –í—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.image(image_path, caption='')

# –°–∫—Ä—ã—Ç–∏–µ —Ñ—É—Ç–µ—Ä–∞ –∏ –º–µ–Ω—é
hide_streamlit_style = """
            <style>
            MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
# st.header('–ë–∞–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ 5–í–µ—Ä—Å—Ç –ü–µ—Ç–µ—Ä–≥–æ—Ñ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏–π—Å–∫–∏–π')

st.divider()

col1, col2 = st.columns(2)

with col1:
    st.subheader('–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü:')
    # st.page_link("pages_dir\main_table.py", label="–ë–∞–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    # st.page_link("pages_dir\records_table.py", label="–ö–ª—É–±—ã –∏ —Ä–µ–∫–æ—Ä–¥—ã")
    st.markdown('''
    - [–ë–∞–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤](main_table)
    - [–ö–ª—É–±—ã –∏ —Ä–µ–∫–æ—Ä–¥—ã](records_table)
    - [–ü–æ—á—Ç–∏ –≤ –∫–ª—É–±–µ](almost_club)
    - [–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã](last_results)
    ''')

#####################################################################################################################################################
# –ü–∞—Ä—Å–∏–Ω–≥
#####################################################################################################################################################

main_url = 'https://5verst.ru/results/latest/'
tarjet_park = '–ü–µ—Ç–µ—Ä–≥–æ—Ñ'  # –ü–µ—Ç–µ—Ä–≥–æ—Ñ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏–π—Å–∫–∏–π
target_runs = [tarjet_park]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
#####################################################################################################################################################

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã –∏–∑ —Å–∞–π—Ç–∞
def get_last_date_from_site():
    url = 'https://5verst.ru/petergofaleksandriysky/results/all/'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    cell_date = soup.find_all('table')[0].find_all('tr')[1].find_all('td')[1]
    last_date = cell_date.text.strip()
    link = cell_date.find('a')['href']
    # print(link)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ last_date –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ –æ–±—ä–µ–∫—Ç datetime
    last_date_site = datetime.strptime(last_date, '%d.%m.%Y').date()
    return last_date_site, link

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã –∏–∑ –ë–î
def get_last_date_from_db(db_url='sqlite:///mydatabase.db'):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_path = db_url.replace('sqlite:///', '')  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(db_path):
        return None  # –ï—Å–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        engine = create_engine(db_url)
        with engine.connect() as connection:
            query = text("SELECT MAX(run_date) FROM runners;")  # –ó–∞–º–µ–Ω–∏—Ç—å run_date –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–æ–π
            result = connection.execute(query)
            last_date_db = result.scalar()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ last_date_db –Ω–µ None, —Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É
            if last_date_db:
                last_date_db = datetime.strptime(last_date_db, '%Y-%m-%d %H:%M:%S.%f').date()
            else:
                last_date_db = None
    except Exception as e:
        st.write(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None
    return last_date_db


last_date_site, last_results_link = get_last_date_from_site()
last_date_db = get_last_date_from_db()
    
with col2:
    st.subheader('–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:')  
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ last_date_db –Ω–µ –ø—É—Å—Ç–∞—è
    if last_date_db is None:
        st.write('–î–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –Ω–µ—Ç!')
    else:
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç
        if last_date_db != last_date_site:
            st.write(f'–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –î–∞—Ç–∞ –≤ –±–∞–∑–µ: {last_date_db}, –¥–∞—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ: [{last_date_site}]({last_results_link}).')
        else:
            st.markdown(f'''–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã üëç  
                        –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {last_date_db}  
                        –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ: [{last_date_site}]({last_results_link})
                        ''')

#####################################################################################################################################################
# –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
#####################################################################################################################################################
def go_search_by_role(option, engine):
    sql_query = text(f'''SELECT name, 
                                COUNT(*) as number, 
                                volunteer_role, 
                                MAX(run_date) as last_date_of_role,
                                profile_link
                        FROM organizers
                        WHERE volunteer_role LIKE "%{option}%" AND run_number != ''
                        GROUP BY profile_link;
                     ''')
    try:
        with engine.connect() as connection:
            result = connection.execute(sql_query).fetchall()

        if result:
            df_results = pd.DataFrame(result)
            df_results['last_date_of_role'] = pd.to_datetime(df_results['last_date_of_role']).dt.date

            with st.container():
                st.data_editor(
                    df_results,
                    column_config={
                        'profile_link': st.column_config.LinkColumn(label="id 5–í—ë—Ä—Å—Ç", display_text=r"([0-9]*)$", width='100px'),
                        'name': st.column_config.Column(label="–ò–º—è", width='120px'), 
                        # 'best_time': st.column_config.Column(label="–õ—É—á—à–µ–µ –≤—Ä–µ–º—è", width='100px'),
                        # 'finishes': st.column_config.Column(label="# —Ñ–∏–Ω–∏—à–µ–π", width='100px'),
                        # 'peterhof_finishes_count': st.column_config.Column(label="# —Ñ–∏–Ω–∏—à–µ–π –≤ –ü–µ—Ç–µ—Ä–≥–æ—Ñ–µ", width='150px'),
                        'volunteer_role': st.column_config.Column(label="–†–æ–ª—å", width='medium'),
                        'number': st.column_config.Column(label="#", width='small'),
                        'last_date_of_role': st.column_config.Column(label="–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞", width='medium'),
                        # 'peterhof_volunteers_count': st.column_config.Column(label="# –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤ –≤ –ü–µ—Ç–µ—Ä–≥–æ—Ñ–µ", width='150px'),
                        # 'clubs_titles': st.column_config.Column(label="–ö–ª—É–±—ã", width='large'),
                    },
                    hide_index=True,
                    key="roles"
                )
        else:
            st.write("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")

    except Exception as e:
        st.write(f"–û—à–∏–±–∫–∞ {e}")


def go_search_by_name(search_query, engine):
    # –û—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞
    words = ' '.join(search_query.strip().split()).lower()
    if not words: 
        return

    # st.write(f'–ü–æ–∏—Å–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞: {words}')
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
    conditions = " OR ".join([f"name_lc LIKE :word{i}" for i in range(len(words.lower().split()))])
    sql_query = text(f'''SELECT profile_link, 
                                name, 
                                best_time, 
                                finishes, 
                                peterhof_finishes_count, 
                                volunteers, 
                                peterhof_volunteers_count, 
                                clubs_titles 
                    FROM users 
                    WHERE {conditions}''')
    params = {f"word{i}": f"%{word}%" for i, word in enumerate(words.split())}

    # st.write(f'SQL –∑–∞–ø—Ä–æ—Å: {sql_query}')
    # st.write(f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}')

    try:
        with engine.connect() as connection:
            result = connection.execute(sql_query, params).fetchall()

        if result:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DataFrame
            df_results = pd.DataFrame(result)
            with st.container():
                st.data_editor(
                    df_results,
                    column_config={
                        'profile_link': st.column_config.LinkColumn(label="id 5–í—ë—Ä—Å—Ç", display_text=r"([0-9]*)$", width='100px'),
                        'name': st.column_config.Column(label="–ò–º—è", width='120px'), 
                        'best_time': st.column_config.Column(label="–õ—É—á—à–µ–µ –≤—Ä–µ–º—è", width='100px'),
                        'finishes': st.column_config.Column(label="# —Ñ–∏–Ω–∏—à–µ–π", width='100px'),
                        'peterhof_finishes_count': st.column_config.Column(label="# —Ñ–∏–Ω–∏—à–µ–π –≤ –ü–µ—Ç–µ—Ä–≥–æ—Ñ–µ", width='150px'),
                        'volunteers': st.column_config.Column(label="# –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤", width='120px'),
                        'peterhof_volunteers_count': st.column_config.Column(label="# –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤ –≤ –ü–µ—Ç–µ—Ä–≥–æ—Ñ–µ", width='150px'),
                        'clubs_titles': st.column_config.Column(label="–ö–ª—É–±—ã", width='large'),
                    },
                    hide_index=True,
                    key="custom_table"
                )
        else:
            st.write("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")

    except Exception as e:
        st.write(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def show_search(db_url):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # db_url = 'sqlite:///mydatabase.db'
    engine = create_engine(db_url)
    try:
        if username in ['host', 'org']:
            querie = '''
            SELECT volunteer_role
            FROM organizers
            '''
            df = pd.read_sql(querie, con=engine)
            array_of_roles = df['volunteer_role'].unique()
            roles = [role.split(', ') for role in array_of_roles]
            unique_roles = []
            for role in roles:
                unique_roles.extend(role)
            
            st.divider()

            st.subheader('–ü–æ–∏—Å–∫ –ø–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–π —Ä–æ–ª–∏:')

            option = st.selectbox(
            "–ü–æ–∏—Å–∫ –ø–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–π —Ä–æ–ª–∏",
            options=sorted(set(unique_roles)),
            index=None,
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å",
            label_visibility='collapsed'
            )

            if option:
                go_search_by_role(option, engine)

        st.divider()

        st.subheader('–ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏:')

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        search_query = st.text_input('–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏', 
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é", 
                                    label_visibility="collapsed")

        if search_query:
            go_search_by_name(search_query, engine)
    except Exception as e:
        # st.write(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        pass

db_url='sqlite:///mydatabase.db'
db_path = db_url.replace('sqlite:///', '')  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

if os.path.exists(db_path):
    show_search(db_url)