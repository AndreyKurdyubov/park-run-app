import os
import streamlit as st
import streamlit.components.v1 as components
import requests
from bs4 import BeautifulSoup
from sqlalchemy import create_engine, text
from datetime import datetime
import pandas as pd  

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title='PARKüå≥RUN', page_icon=':running:')

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
image_path = 'logo.jpg'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

# –í—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.image(image_path, caption='', use_column_width='auto')

# –°–∫—Ä—ã—Ç–∏–µ —Ñ—É—Ç–µ—Ä–∞
hide_streamlit_style = """
    <style>
    footer {visibility: hidden;}
    </style>
    """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title('–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')

st.subheader('–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü')

st.markdown('''
–¢—É—Ç –≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.  
–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü:
- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
- –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤
- –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –±–µ–≥—É–Ω–æ–≤
- –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
''')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã –∏–∑ —Å–∞–π—Ç–∞
def get_last_date_from_site():
    url = 'https://5verst.ru/petergofaleksandriysky/results/all/'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    last_date = soup.find_all('table')[0].find_all('tr')[1].find_all('td')[1].text.strip()

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ last_date –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ –æ–±—ä–µ–∫—Ç datetime
    last_date_site = datetime.strptime(last_date, '%d.%m.%Y').date()
    return last_date_site

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã –∏–∑ –ë–î
def get_last_date_from_db(db_url='sqlite:///mydatabase.db'):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_path = db_url.replace('sqlite:///', '')  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(db_path):
        return None  # –ï—Å–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    engine = create_engine(db_url)
    with engine.connect() as connection:
        query = text("SELECT MAX(run_date) FROM runners")  # –ó–∞–º–µ–Ω–∏—Ç—å run_date –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–æ–π
        result = connection.execute(query)
        last_date_db = result.scalar()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ last_date_db –Ω–µ None, —Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É
        if last_date_db:
            last_date_db = datetime.strptime(last_date_db, '%Y-%m-%d %H:%M:%S.%f').date()
        else:
            last_date_db = None
    return last_date_db

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
def parse_website():
    # URL —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    url = 'https://5verst.ru/results/latest/'

    # –ü–æ–ª—É—á–∞–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    table = soup.find('table')  

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    starts_latest = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã
    for row in table.find_all('tr')[1:]:
        cells = row.find_all('td')
        if len(cells) > 0:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            number_cell = cells[0]
            run = number_cell.text.strip().split(' #')[0]  # –°—Ç–∞—Ä—Ç
            link = number_cell.find('a')['href'] if number_cell.find('a') else None
            date = cells[1].text.strip()  # –î–∞—Ç–∞ –∑–∞–±–µ–≥–∞
            finishers = cells[2].text.strip()  # –ß–∏—Å–ª–æ —Ñ–∏–Ω–∏—à—ë—Ä–æ–≤
            volunteers = cells[3].text.strip()  # –ß–∏—Å–ª–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤
            avg_time = cells[4].text.strip()  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
            best_female_time = cells[5].text.strip()  # –õ—É—á—à–µ–µ –≤—Ä–µ–º—è "–ñ"
            best_male_time = cells[6].text.strip()  # –õ—É—á—à–µ–µ –≤—Ä–µ–º—è "–ú"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
            starts_latest.append([run, date, link, finishers, volunteers, avg_time, best_female_time, best_male_time])

    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    starts_latest = pd.DataFrame(starts_latest, columns=['run', 'run_date', 'run_link', 'finishers', 'volunteers', 'avg_time', 'best_female_time', 'best_male_time'])

    # –°–ø–∏—Å–æ–∫ –∑–∞–±–µ–≥–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
    target_runs = ['–ü–µ—Ç–µ—Ä–≥–æ—Ñ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏–π—Å–∫–∏–π']

    # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame –ø–æ —Å–ø–∏—Å–∫—É –∑–∞–±–µ–≥–æ–≤
    filtered_starts_latest = starts_latest[starts_latest['run'].isin(target_runs)]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
    starts_data = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    for index, row in filtered_starts_latest.iterrows():
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–±–µ–≥–∞
        run_url = row['run_link']
        if run_url:
            run_response = requests.get(run_url)
            run_soup = BeautifulSoup(run_response.text, 'html.parser')

            # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–±–µ–≥–∞
            run_table = run_soup.find('table')
            
            run_data = []

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã
            for run_row in run_table.find_all('tr')[1:]:
                run_cells = run_row.find_all('td')
                if len(run_cells) > 0:
                    number = run_cells[0].text.strip()  # –ù–æ–º–µ—Ä –∑–∞–±–µ–≥–∞
                    date_cell = run_cells[1]
                    link = date_cell.find('a')['href'] if date_cell.find('a') else None
                    date = date_cell.text.strip()  # –î–∞—Ç–∞ –∑–∞–±–µ–≥–∞

                    finishers = run_cells[2].text.strip()  # –ß–∏—Å–ª–æ —Ñ–∏–Ω–∏—à—ë—Ä–æ–≤
                    volunteers = run_cells[3].text.strip()  # –ß–∏—Å–ª–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤
                    avg_time = run_cells[4].text.strip()  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
                    best_female_time = run_cells[5].text.strip()  # –õ—É—á—à–µ–µ –≤—Ä–µ–º—è "–ñ"
                    best_male_time = run_cells[6].text.strip()  # –õ—É—á—à–µ–µ –≤—Ä–µ–º—è "–ú"

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
                    run_data.append([number, date, link, finishers, volunteers, avg_time, best_female_time, best_male_time])

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–±–µ–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–±–µ–≥—É
            for item in run_data:
                starts_data.append([row['run']] + item)  # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–±–µ–≥–∞ + –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π DataFrame
    starts_data = pd.DataFrame(starts_data, columns=['run', 'run_number', 'run_date', 'run_link', 'finishers', 'volunteers', 'avg_time', 'best_female_time', 'best_male_time'])

    orgs_data = []
    runners_data = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    for index, df_row in starts_data.iterrows():  
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–±–µ–≥–∞
        run_url = df_row['run_link']
        if run_url:
            # –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = requests.get(run_url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
                continue

            soup = BeautifulSoup(response.text, 'html.parser')

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_tables = soup.find_all('table')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã
            if len(all_tables) < 2:
                print('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Ç–æ—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ')
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            run_table = all_tables[0]
            if run_table:
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                for run_row in run_table.find_all('tr')[1:]:
                    run_cells = run_row.find_all('td')
                    if len(run_cells) >= 4:
                        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
                        position = run_cells[0].get_text(strip=True) if run_cells[0] else '‚Äî'

                        # –ò–º—è –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
                        name_tag = run_cells[1].find('a')
                        name = name_tag.get_text(strip=True) if name_tag else '‚Äî'
                        profile_link = name_tag['href'] if name_tag else '‚Äî'

                        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞
                        participant_id = profile_link.split('/')[-1] if profile_link != '‚Äî' else '‚Äî'

                        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∏—à–µ–π –∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤
                        stats_div = run_cells[1].find('div', class_='user-stat')
                        finishes = '‚Äî'
                        volunteers = '‚Äî'
                        if stats_div:
                            stats_spans = stats_div.find_all('span')
                            finishes = stats_spans[0].get_text(strip=True).split(' ')[0] if len(stats_spans) > 0 else '‚Äî'
                            volunteers = stats_spans[1].get_text(strip=True).split(' ')[0] if len(stats_spans) > 1 else '‚Äî'

                        # –ö–ª—É–±—ã
                        club_tags = run_cells[1].find_all('span', class_='club-icon')
                        clubs = ', '.join([club['title'] for club in club_tags]) if club_tags else '‚Äî'

                        # –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏ Age Grade
                        age_group = run_cells[2].get_text(strip=True).split(' ')[0] if run_cells[2] else '‚Äî'
                        age_grade_tag = run_cells[2].find('div', class_='age_grade')
                        age_grade = age_grade_tag.get_text(strip=True) if age_grade_tag else '‚Äî'

                        # –í—Ä–µ–º—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                        time = run_cells[3].get_text(strip=True) if run_cells[3] else '‚Äî'
                        achievements = []
                        achievements_div = run_cells[3].find('div', class_='table-achievments')
                        if achievements_div:
                            achievement_icons = achievements_div.find_all('span', class_='results_icon')
                            for icon in achievement_icons:
                                achievements.append(icon['title'])  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                        runners_data.append([
                            df_row['run'], df_row['run_number'], df_row['run_date'], df_row['run_link'], df_row['finishers'], 
                            df_row['volunteers'], df_row['avg_time'], df_row['best_female_time'], df_row['best_male_time'], 
                            position, name, profile_link, participant_id, clubs, finishes, volunteers, age_group, age_grade, time, ', '.join(achievements)
                        ])

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä—É—é —Ç–∞–±–ª–∏—Ü—É 
            orgs_table = all_tables[1]

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            table_rows = orgs_table.find_all('tr')

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã
            for html_row in table_rows:  
                columns = html_row.find_all('td')

                if len(columns) > 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∫–æ–ª–æ–Ω–∫–∏
                    # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∏–º—è, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∏—à–µ–π –∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤
                    name_tag = columns[0].find('a')
                    name = name_tag.get_text(strip=True) if name_tag else '‚Äî'
                    profile_link = name_tag['href'] if name_tag else '‚Äî'
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
                    participant_id = profile_link.split('/')[-1] if profile_link else '‚Äî'

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∏—à–µ–π –∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤
                    stats_div = columns[0].find('div', class_='user-stat')
                    finishes = '‚Äî'
                    volunteers = '‚Äî'
                    if stats_div:
                        stats_spans = stats_div.find_all('span')
                        finishes = stats_spans[0].get_text(strip=True).split(' ')[0] if len(stats_spans) > 0 else '‚Äî'
                        volunteers = stats_spans[1].get_text(strip=True).split(' ')[0] if len(stats_spans) > 1 else '‚Äî'

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—É–±—ã (–≤—Å–µ –∫–ª—É–±—ã)
                    club_tags = columns[0].find_all('span', class_='club-icon')
                    clubs = ', '.join([club['title'] for club in club_tags]) if club_tags else '‚Äî'

                    # –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Ä–æ–ª—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤–æ–º –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–µ
                    volunteer_role_info = columns[1].find('div', class_='volunteer__role')
                    if volunteer_role_info:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç title –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–≤–æ–º –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–µ
                        first_volunteer_tag = volunteer_role_info.find('span', class_='results_icon')
                        first_volunteer_info = first_volunteer_tag['title'] if first_volunteer_tag else '‚Äî'

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–ª–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
                        role_tag = volunteer_role_info.find_all('span')
                        volunteer_role = role_tag[-1].get_text(strip=True) if role_tag else '‚Äî'
                    else:
                        first_volunteer_info = '‚Äî'
                        volunteer_role = '‚Äî'

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
                    orgs_data.append([df_row['run'], df_row['run_number'], df_row['run_date'], df_row['run_link'], df_row['finishers'], 
                                df_row['volunteers'], df_row['avg_time'], df_row['best_female_time'], df_row['best_male_time'],
                                    name, profile_link, participant_id, finishes, volunteers, clubs, volunteer_role, first_volunteer_info
                                    ])
    return orgs_data, runners_data 

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_to_database(df_orgs, df_runners, db_url='sqlite:///mydatabase.db'):
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    engine = create_engine(db_url)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É 'organizers'
    df_orgs.to_sql('organizers', con=engine, if_exists='replace', index=False)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–≥—É–Ω–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É 'runners'
    df_runners.to_sql('runners', con=engine, if_exists='replace', index=False)

#–ü–∞—Ä—Å–∏–Ω–≥
def run_parsing():
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ (—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞)
    orgs_data, runners_data = parse_website()  

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
    df_orgs = pd.DataFrame(orgs_data, columns=[
        'run', 'run_number', 'run_date', 'run_link', 'finisher', 'volunteer', 'avg_time', 'best_female_time', 'best_male_time', 
        'name', 'profile_link', 'participant_id', 'finishes', 'volunteers', 'clubs', 'volunteer_role', 'first_volunteer_info'
    ])
    df_orgs['run_date'] = pd.to_datetime(df_orgs['run_date'], dayfirst=True)
    df_orgs['finisher'] = df_orgs['finisher'].astype('int')
    df_orgs['volunteer'] = df_orgs['volunteer'].astype('int')

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –±–µ–≥—É–Ω–æ–≤
    df_runners = pd.DataFrame(runners_data, columns=[
        'run', 'run_number', 'run_date', 'run_link', 'finisher', 'volunteer', 'avg_time', 'best_female_time', 'best_male_time', 
        'position', 'name', 'profile_link', 'participant_id', 'clubs', 'finishes', 'volunteers', 'age_group', 'age_grade', 'time', 'achievements'
    ])
    df_runners['run_date'] = pd.to_datetime(df_runners['run_date'], dayfirst=True)
    df_runners['finisher'] = df_runners['finisher'].astype('int')
    df_runners['volunteer'] = df_runners['volunteer'].astype('int')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_to_database(df_orgs, df_runners)


last_date_site = get_last_date_from_site()
last_date_db = get_last_date_from_db()
    
st.subheader('–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö')  
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ last_date_db –Ω–µ –ø—É—Å—Ç–∞—è
if last_date_db is None:
    st.write('–î–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –Ω–µ—Ç!')
    if st.button('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
        st.write('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...')
        run_parsing()
        st.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
else:
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç
    if last_date_db != last_date_site:
        st.write(f'–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –î–∞—Ç–∞ –≤ –±–∞–∑–µ: {last_date_db}, –¥–∞—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ: {last_date_site}.')
        
        if st.button('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
            st.write('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...')
            run_parsing()
            st.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
    else:
        st.markdown(f'''–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã üëç  
                    –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {last_date_db}  
                    –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ: {last_date_site}
                    ''')

st.subheader('–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏')        
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def search_database(query):
    db_url = 'sqlite:///mydatabase.db'
    engine = create_engine(db_url)
    with engine.connect() as connection:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL –¥–ª—è –ø–æ–∏—Å–∫–∞
        query_like = f"%{query}%"
        sql_query = text("SELECT * FROM runners WHERE name LIKE :query")
        result = connection.execute(sql_query, {"query": query_like}).fetchall()  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
    return result

# –ü–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –±–µ–≥—É–Ω–∞:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
if search_query:
    search_results = search_database(search_query)

    if search_results:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ DataFrame
        df_results = pd.DataFrame(search_results)  # –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫
        st.dataframe(df_results)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
    else:
        st.write("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")


components.iframe("https://html-preview.github.io/?url=https://github.com/AndreyKurdyubov/protocol5/blob/main/out.html", height=600, scrolling=True)